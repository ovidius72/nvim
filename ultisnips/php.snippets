# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet doc_inherit "Inheritdoc" b
/**
* {@inheritdoc}
*/
endsnippet

snippet type_declaration "Type Declaration" b
/** @var ${1:type} **/
endsnippet

snippet fp "Public function" b
public function $1($2) {
	$0;
}
endsnippet

snippet fpr "Protected function" b
protected function $1($2) {
	$0;
}
endsnippet

snippet block_config "Drupal 8 block configuration" b
/**
* {@inheritdoc}
*/
public function defaultConfiguration()
{
	return [
		'${1:enabled}' => ${2:1},
	];
}

/**
* {@inheritdoc}
*/
public function blockForm($form, \Drupal\Core\Form\FormStateInterface $form_state)
	{
		$config = $this->getConfiguration();
		$form['$1'] = [
			'#type' => '${3:textfield}',
			'#title' => $this->t('$1'),
				'#description' => $this->t('${4:Description}'),
			'#default_value' => $config['$1'],
		];
return $form;
}

/**
* {@inheritdoc}
*/
public function blockSubmit($form, \Drupal\Core\Form\FormStateInterface $form_state)
{
	$this->configuration['$1'] = $form_state->getValue('$1');
}
endsnippet

snippet block_class "Drupal Block Plugin class" b
<?php

namespace Drupal\\${1:my_namespace}\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\\$1\\${2:service};

/**
* ${3:My Drupal} Block
*
* @Block(
*  id = '${4:my_block_id}',
*  admin_label = @Translation("$2"),
*  )
*/
class ${5:ClassName} extends BlockBase implements ContainerFactoryPluginInterface
{

	/**
	* The Injected Service.
	*
	* @var \Drupal\\$1\\$2
	*/
	protected $${6:service};

	/**
	* Constructor
	*
	* @param array $configuration
	*  A configuration array containing information about the plugin instance.
	* @param string $plugin_id
	*  The plugin_id for the plugin instance.
	* @ string $plugin_definition
	*  The plugin implementation definition
	* @param \Drupan\$1\$2 $$6
	*  The injected service.
	*/
	public function __construct(array $configuration, $plugin_id, $plugin_definition, $2 $$6)
	{
		parent::__construct($configuration, $plugin_id, $plugin_definition);
		$this->$6 = $$6;
	}

	/**
	* {@inheritdoc}
	*/
	public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition)
	{
		return new static(
			$configuration,
			$plugin_id,
			$plugin_definition,
			$container->get('$7')
		);
	}

	/**
	* {@inheritdoc}
	*/
	public function build() {
		return [
			'#markup' => $this->$6->$0
		];
	}
}
endsnippet

snippet controller_class "Drupal Controller Class" b
<?php

namespace Drupal\\${1:namespace}\Controller;

use Drupal\Core\Controller\ControllerBase;
use Drupal\\$1\\${2:serviceClass};

/**
* Controller for hello world.
*/
class ${3:ClassName} extends ControllerBase
{
	/**
	* @var \Drupal\\$1\\$2
	*/
	protected $${4:serviceName};


	/**
	* @param HelloWorldSalutation $salutation
	*/
	public function __construct($2 $$4)
	{
		$this->$4 = $$4;
	}

	/**
	* {@inheritdoc}
	*/
	public static function create(\Symfony\Component\DependencyInjection\ContainerInterface $container)
	{
		return new static(
			$container->get('${5:service_string_name}')
		);
	}

	/**
	* ${6:methodName}
	*
	* @return ${7:array}
	*/
	public function $6()
	{
		$0
	}
}
endsnippet


snippet form_configuration_class "Drupal Configuration Form" b
<?php

namespace Drupal\\${1:namespace}\Form;

use Drupal\Core\Form\ConfigFormBase;

/** 
* ${2:description}
*/
class ${3:FormClassName} extends ConfigFormBase  {

	/**
	* {@inheritdoc}
	*/
	protected function getEditableConfigNames()
	{
		return [
		'$1.${4:configName}',$5
		];
	}

	/**
	* {@inheritdoc}
	*/
	public function getFormId()
	{
		return '${6:formId}';
	}

	/**
	* {@inheritdoc}
	*/
	public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state)
	{
		$config = $this->config('$1.$4');

		$form['${7:fieldName}'] = array(
			'#type' => '${8:fieldType}',
			'#title' => $this->t('${9:fieldTitle}'),
			'#description' => $this->t('${10:fieldDescription}'),
			'#default_value' => $config->get('$7'),
		);

		return parent::buildForm($form, $form_state);
	}

	public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state)
	{
		$this->config('$1.$4')
				->set('$7, $form_state->getValue('$7'))
				->save();

		parent::submitForm($form, $form_state); 
		// just print a confirmation message
		// $this->messenger()->addMessage("This is a custom message"); 
		// that can be customized.
		// $this->messenger()->addWarning('This is a warning');
	}
}
endsnippet

snippet event_subscriber_class "Drupal EventSubscriber" b
<?php

namespace Drupal\\${1:namespace}\EventSubscriber;

use Drupal\Core\Routing\CurrentRouteMatch;
use Drupal\Core\Routing\LocalRedirectResponse;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\Core\Url;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\Event\GetResponseEvent;
use Symfony\Component\HttpKernel\KernelEvents;

/**
* Subscribe to the Kernel Request event and redirects to the home page when
* the user has the non_grata role.
*/
class ${2:ClassName} implements EventSubscriberInterface {

	/**
	* @var AccountProxyInterface $currentUser
	*/
	protected $currentUser;

	/** 
	* @var CurrentRouteMatch $currentRouteMatch
	*/
	protected $currentRouteMatch;

	public function	__construct(AccountProxyInterface $currentUser, CurrentRouteMatch $currentRouteMatch) {
		$this->currentUser = $currentUser;
		$this->currentRouteMatch = $currentRouteMatch;
	}

	/**
	* {@inheritdoc}
	*/
	public static function getSubscribedEvents()
	{
		$events[KernelEvents::REQUEST][] = ['onRequest', 0];
		return $events;
	}

	public function onRequest(GetResponseEvent $event) {
		$route_name = $this->currentRouteMatch->getRouteName();
		if($route_name !== '${3:route_name}') {
			return;
		}

		$roles = $this->currentUser->getRoles();
		if(in_array('non_grata', $roles)) {
			$url = Url::fromUri('internal:/');
			$event->setResponse(new LocalRedirectResponse($url->toString()));
		}
	}

}
endsnippet

snippet service_class "Drupal Service Class" b
<?php


namespace Drupal\\${1:namespace};

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;

/**
* ${2:class_descripton}
*/
class ${3:ClassName} {

	use StringTranslationTrait;

	/**
	* @var ConfigFactoryInterface
	*/
	protected $configFactory;

	/** 
	* $3 constructor.
	*
	* @param ConfigFactoryInterface $config_factory
	*/
	public function __construct(ConfigFactoryInterface $config_factory)
	{
		$this->configFactory = $config_factory;
	}

	/**
	* ${4:method_description}.
	*/
	public function ${5:methodName}() {
		$config = $this->configFactory->get('${6:config_key_name}');
		$${7:serviceValue} = $config->get('${8:config_value_name}');

		if($$7 != "") 
			return $$7->$0;
		}
	}
}
endsnippet

#################################
####### DRUPAL HOOKS ############
#################################
snippet dhook_token_info "Drupal Hook Token Info" b
/**
* implements hook_token_info()
*/
function ${1:`!v expand("%:p:h:t")`}_token_info()
{

	$type = [
		'name' => t('${2:Name}'),
		'description' => t('${3:Description}'),
	];
	$tokens['${4:token}'] = [
		'name' => t('${5:$4}'),
		'name' => t('${6:Description}'),
	];

	return [
		'types' => ['$1' => $type],
		'tokens' => ['$1' => $tokens]
	];
}

/**
* implements hook_tokens()
*/
function $1_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
	$replacements = [];
	if ($type === '$1') {
		foreach ($tokens as $name => $original) {
			switch($name) {
			case '$4':
				$replacements[$original\] = \Drupal::service('${7:service_name}')->${8:service_method}();
				$config = \Drupal::config('${9:config_name}');

				// add config as a cache dependency. When config change the cache in invalidated.
				$bubbleable_metadata->addCacheableDependency($config); 
				break;$0
			}
		}
	}
}
endsnippet

snippet dhook_mail "Drupal hook mail" b
/**
* implements hook_mail().
*/
function ${1:`!v expand("%:p:h:t")`}_mail($key, &$message, $params)
{
	switch ($key) {
		case '${2:$1}':
			// $message['header'] can be used to add additional headers.
			$message['from'] = \Drupal::config('${3:system.site}')->get('${4:mail}');
			$message['subject'] = t('${5:my subject}');
			$message['body'][] = $params['${6:message}'];
			break;
	}
}
endsnippet

snippet dhook_help "Drupal hook help" b
/**
* implements hook help
*/
function ${1:`!v expand("%:p:h:t")`}_help($route_name, RouteMatchInterface $route_match)
{
	switch ($route_name) {
		case '${2:help.page.$1}':
			$output = "";
			$output .= "<h3>" . t('${3:title}') . "</h3>";
			$output .= "<p>" . t('${4:description}') . "</p>";
			return $output;
			default:
	}
}
endsnippet


snippet dhook_theme "Drupal hook theme" b
/**
* Implements hook_theme().
*/
function ${1:`!v expand("%:p:h:t")`}_theme($existing, $type, $path) {
  $variables = array(
    'mymodule' => array(
      'variables' => array(
        'source_text' => NULL
      ),
      'template' => '${2:$1}',
    ),
    'myfield' => array(
      'variables' => [
        'title' => '',
        'items' => [],
        'attributes' => []
      ],
      'template' => '${3:myfield}',
    )
  );

  return $variables;
}
endsnippet
