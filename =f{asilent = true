local helpers = require('legendary.helpers')

vim.cmd [[
" toggle quickfix list
function! ToggleQuickFix()
    if empty(filter(getwininfo(), 'v:val.quickfix'))
        copen
    else
        cclose
    endif
endfunction
" clear quickfix
command! ClearQuickFixList cexpr []
function TabToggle()
  if &expandtab
    set tabstop=4
    set shiftwidth=4
    set softtabstop=0
    set noexpandtab
    echo 'Tab set'
  else
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
    set smarttab
    set autoindent
    set expandtab
    echo 'Space set'
  endif
endfunction
]]

local keymaps = {
  { '<leader>:', ':Legendary<CR>', description = 'Legendary', opts = {} },
  { '<leader><Tab>', '<C-^>', description = 'Alternate Buffer', opts = { silent = true} },
  -- buffers
  { '<leader>bs', ':w<CR>', description = 'Split Horizontal', opts = {} },
  { '<leader>bs', ':w<CR>', description = 'Split Horizontal', opts = {} },
  { '<leader>l', ':Buffers<CR>', description = 'Open Buffers', opts = {} },
  { '<leader>i', ':HFiles<CR>', description = 'Files in Project', opts = {} },
  -- bclose
  { '<leader>ba', ':Bdelete all<CR>', description = 'Buffer Delete All', opts = {silent=true} },
  { '<leader>bS', ':Bdelete select<CR>', description = 'Buffer Delete Select', opts = {silent=true} },
  { '<leader>bk', ':Bclose<CR>', description = 'Buffer Close', opts = {silent=true} },
  { '<leader>bK', ':Bdelete! this<CR>', description = 'Buffer Delete This', opts = {silent=true} },
  { '<leader>bh', ':Bdelete hidden<CR>', description = 'Buffer Delete Hidden', opts = {silent=true} },
  { '<leader>bm', ':Bdelete menu<CR>', description = 'Buffer Delete Menu', opts = {silent=true} },
  { '<leader>bo', ':Bdelete other<CR>', description = 'Buffer Delete Other', opts = {silent=true} },
  { '<leader>bl', ':Bdelete nameless<CR>', description = 'Buffer Delete Nameless', opts = {silent=true} },
  -- windows
  { '<leader>ws', ':sp<CR>', description = 'Split Horizontal', opts = {} },
  { '<leader>wv', ':vs<CR>', description = 'Split Vertical', opts = {} },
  { '<leader>wd', '<C-W>c', description = 'Close Window', opts = {} },
  { '<leader>;', ':Win<CR>', description = 'WinVim', opts = { silent = true} },
  { '<leader>.', ':call win#Win(1)<CR>', description = 'WinVim Once', opts = { silent = true} },
  { '<leader>M', ':MaximizerToggle<CR>', description = 'Maximizer Toggle', opts = {} },
  -- e - errors
  { '<leader>el', ':<C-u>CocList diagnostics<CR>', description = 'Coc Diagnostics', opts = {} },
  -- f - files
  { '<leader>fs', ':wa<CR>', description = 'Save All', opts = {} },
  { '<leader>fc', ":CocSearch <C-R>=expand('<cword>')<CR><CR>", description = 'Coc Search Word (new Window)', opts = { silent = true} },
  { '<leader>fx', ":CocSearch -w <C-R>=expand('<cword>')<CR><CR>", description = 'Coc Search Word (new Window)', opts = { silent = true} },
  { '<leader>fer', ':so ~/.config/nvim/init.vim<CR>', description = 'Source Neovim Configuration', opts = {} },
  { '<leader>fed', ':e ~/.config/nvim/neovim.vim<CR>', description = 'Open Neovim Configuration', opts = {} },
  { '<leader>feU', ':PU<CR>', description = 'Plug Update', opts = {} },
  { '<leader>feI', ':PlugInstall<CR>', description = 'Plug Install', opts = {} },
  { '<leader>fi', ':<C-u>CocList --interactive --ignore-case --numbe-select --auto-preview symbols<CR>', description = 'Coc Find Symbols', opts = {} },
  -- g - git
  { '<leader>gd', '<Plug>(coc-definition)', description = 'Save All', opts = { silent = true} },
  { '<leader>gD', ":call CocAction('definitionHover')<CR>", description = 'Definition Hover', opts = { silent = true} },
  { '<leader>gS', ":call CocAction('jumpDefinition, 'split')<CR>", description = 'Jump Definition Horizontal Split', opts = { silent = true} },
  { '<leader>gV', ":call CocAction('jumpDefinition, 'vsplit')<CR>", description = 'Jump Definition Vertical Split', opts = { silent = true} },
  { '<leader>gO', ":call CocAction('showOutgoingCalls, 'split')<CR>", description = 'Coc Show Outgoing Calls', opts = { silent = true} },
  { '<leader>gL', ":call CocAction('showIncomingCalls, 'split')<CR>", description = 'Coc Show Incoming Calls', opts = { silent = true} },
  { '<leader>gy', "<Plug>(coc-type-definition)", description = 'Coc Type Definition', opts = { silent = true} },
  { '<leader>gI', "<Plug>(coc-type-implementation)", description = 'Coc Type Implementation', opts = { silent = true} },
  { '<leader>gr', "<Plug>(coc-references)", description = 'Coc References', opts = { silent = true} },
  { '<leader>gU', "<Plug>(coc-references-used)", description = 'Coc References Used', opts = { silent = true} },
  { '<leader>gR', "<Plug>(coc-refactor)", description = 'Coc Refactor', opts = { silent = true} },
  -- h
  { '<leader>hl', ':set list!<CR>', description = 'Toggle Whitespace', opts = {} },
  { '<leader>ht', "mz:execute TabToggle()<CR>'z", description = 'Toggle Tab/Spaces', opts = {} },
  { '<leader>hr', ":%retab!<CR>", description = 'Retab', opts = {} },
  -- o
  { '<leader>of', ':FM<CR>', description = 'Format', opts = {} },
  { '<leader>oF', ':Fold<CR>', description = 'Fold', opts = {} },
  { '<leader>oo', ':OR<CR>', description = 'Organize Imports', opts = {} },
  -- p
  { '<leader>pp', ':CocList project<CR>', description = 'Coc Projects', opts = {} },
  { '<leader>oo', ':OR<CR>', description = 'Organize Imports', opts = {} },
  -- q
  { '<leader>qq', ':wa<CR>', description = 'Save All', opts = {} },
  -- x
  { '<leader>xj', ':SplitjoinJoin<CR>', description = 'Splitjoin Join', opts = {} },
  { '<leader>xs', ':SplitjoinSplit<CR>', description = 'Splitjoin Split', opts = {} },
  -- Y
  { '<leader>y', '"+y', description = 'Yank to clipboard', opts = {} },
  { '<leader>Y', '"+p', description = 'Paste from clipboard', opts = {} },
  -- C (Code)
  { '<leader>cz', ':CocRestart<CR>', description = 'Coc Restart', opts = { silent = true} },
  { '<leader>cu', ':CocUpdate<CR>', description = 'Coc Update', opts = { silent = true} },
  { '<leader>cr', '<Plug>(coc-rename)', description = 'Coc Rename', opts = { silent = true} },
  { '<leader>cw', ":exe 'CocList -I --input='.expand('<cword>').' grep'<CR>", description = 'Coc Find Word At Caret', opts = { silent = true} },
  { '<leader>cF',
    {
      v = { '<Plug>(coc-format-selected)', description = 'Coc Code Format Selected', opts = { silent = true} },
      n = { '<Plug>(coc-format-selected)', description = 'Coc Code Format Selected', opts = { silent = true} }
    }
  },
  { '<leader>co',
    {
      v = { '<Plug>(coc-codeaction-line)', description = 'Coc Code action line', opts = { silent = true} },
      n = { '<Plug>(coc-codeaction-line)', description = 'Coc Code action line', opts = { silent = true} }
    }
  },
  { '<leader>cv',
    {
      v = { '<Plug>(coc-codeaction-selected)', description = 'Coc Code action selected', opts = { silent = true} },
      n = { '<Plug>(coc-codeaction-selected)', description = 'Coc Code action selected', opts = { silent = true} }
    }
  },
  { '<leader>cll', ':CocList<CR>', description = 'CocList', opts = { silent = true} },
  { '<leader>cls', ':<C-u>CocList -I symbols<CR>', description = 'Coc Symbols', opts = { silent = true, nowait = true} },
  { '<leader>cld', ':CocList diagnostics<CR>', description = 'CocList Diagnostics', opts = { silent = true, nowait = true} },
  { '<leader>cle', ':CocList extensions<CR>', description = 'CocList Extensions', opts = { silent = true, nowait = true} },
  { '<leader>clc', ':CocList commands<CR>', description = 'CocList Commands', opts = { silent = true, nowait = true} },
  { '<leader>clo', ':CocList outline<CR>', description = 'CocList Outline', opts = { silent = true, nowait = true} },
  { '<leader>cls', ':CocList -I symbols<CR>', description = 'CocList Symbols', opts = { silent = true, nowait = true} },
  { '<leader>cln', ':CocNext<CR>', description = 'CocList Next', opts = { silent = true, nowait = true} },
  { '<leader>clp', ':CocPrev<CR>', description = 'CocList Previous', opts = { silent = true, nowait = true} },
  { '<leader>clr', ':CocListResume<CR>', description = 'CocList Resume', opts = { silent = true, nowait = true} },
  { '<leader>cpl', ':CocList project<CR>', description = 'Coc List Projects', opts = {} },
  { '<leader>css', ':CocCommand session.save<CR>', description = 'Coc Session Save', opts = {} },
  { '<leader>csl', ':CocCommand session.load<CR>', description = 'Coc Session Load', opts = {} },
  { '<leader>cL', '<Plug>(coc-codelens-action)', description = 'CocCodelens Actions', opts = { silent = true, nowait = true} },
  { '<leader>ci', '<Plug>(coc-diagnostic-info)', description = 'Coc Diagnostic Info', opts = { silent = true, nowait = true} },
  { '<leader>u', '<Plug>(coc-diagnostic-info)', description = 'Coc Diagnostic Info', opts = { silent = true, nowait = true} },
  { '<leader>ce', '<Plug>(coc-float-hide)', description = 'Coc Float Hide', opts = { silent = true, nowait = true} },
  { '<leader>cj', '<Plug>(coc-float-jump)', description = 'Coc Float Jump', opts = { silent = true, nowait = true} },
  { '<leader>cO', '<Plug>(coc-openlink)', description = 'Coc Open Link', opts = { silent = true, nowait = true} },
  { '<leader>ck', ':CocCommand docthis.documentThis', description = 'Document this', opts = { silent = true, nowait = true} },
  { '<leader>cf', ':CocList files', description = 'Coc Files', opts = { silent = true, nowait = true} },
  { "<A-'>",
    { n = '<Plug>(coc-range-select)', description = 'Coc Range Select', opts = { silent = true, nowait = true} },
    { v = '<Plug>(coc-range-select)', description = 'Coc Range Select', opts = { silent = true, nowait = true} },
  },
  { "<A-;>",
    { n = '<Plug>(coc-range-select)', description = 'Coc Range Select', opts = { silent = true, nowait = true} },
    { v = '<Plug>(coc-range-select-backward)', description = 'Coc Range Select Backward', opts = { silent = true, nowait = true} },
  },
  { '<leader>ca',
    { n = '<Plug>(coc-codeaction)', description = 'Coc Code Action', opts = { silent = true, nowait = true} },
    { v = '<Plug>(coc-codeaction-selected)', description = 'Coc Code Action Selected', opts = { silent = true, nowait = true} }
  },

  { '<leader>cP', 'yap<S-}p', description = 'Paste from clipboard', opts = {} },
  { '[s', '[s', description = 'Next Spell', opts = {} },
  { ']s', ']s', description = 'Prev Spell', opts = {} },
};


require('legendary').bind_keymaps(keymaps)
